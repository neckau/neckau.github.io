---
layout: post
title:  "程序员与复杂度"
date:   2021-02-26 16:39:00 +0800
categories: jekyll update
---


程序员的一生，往往都在和复杂度做斗争，关于复杂度，这篇文章说的很好：
https://zhuanlan.zhihu.com/p/26887003

我认为在复杂度方面，一个程序员的能力体现在：
一，掌控复杂代码的能力，能力越强，他可以掌控的代码复杂度越高。所谓掌控，指的是几乎倒背如流的逻辑组块，比如我可以闭眼写单例、监听者，而一个大学生可能就得回忆个半天。这像是国际象棋，高手心中记着成千上万的棋局，这些都是他掌握的组块。而我，只能看着棋面现想下一步怎么走。
二，分解高复杂度问题的能力，能力越强，就可以拆解越复杂的问题，能力越强，拆解出来的子问题也更合理更简单。

我们不断提升自己一号能力的同时，还得注意二号的使用。并不是技术能力强，写的代码就一定要复杂。我们都知道，事实往往相反。而且我认为，在某些层面上说，一号能力存在上限，这个上限还很低。比如，再强的高手，也不见得能一口气把数百行的复杂逻辑写在一起而不出错。更多时候，他在不断积累的，不是泛用的逻辑能力，而只是自己领域内的编码组块。

分解则是更泛用的能力。面向对象和函数式编程都是为了分解复杂问题而导出的模式。所谓的封装可变性，所谓的模块化，小到合理安排工程文件夹，大到架构设计的低耦合，一切的核心都是降低复杂度。复杂度就是项目的熵，控制好了，开发人员得心应手，控制的不好，新功能举步维艰。分解能力的泛用甚至跳出了程序的圈子。分解、分治思想往往是一个人一生中解决问题的核心思路。各种大厂的著名智力面试题，十之八九的解题思路都是分解。这里就不再发散了。

